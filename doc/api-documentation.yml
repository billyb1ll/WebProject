openapi: 3.0.3
info:
  title: Chocolate Customizer API
  description: API for chocolate customization service and product management
  version: 1.0.0
servers:
  - url: /api/v1
    description: Production API path
components:
  schemas:
    Product:
      type: object
      properties:
        product_id:
          type: integer
          example: 1
        product_name:
          type: string
          example: "Dark Chocolate Bar"
        product_status:
          type: boolean
          description: Whether the product is active
          example: true
        product_quantities:
          type: integer
          description: Available stock quantity
          example: 100
        product_sold:
          type: integer
          description: Number of units sold
          example: 25
        product_price:
          type: number
          format: float
          example: 9.99
        product_category:
          type: string
          example: "chocolate-bar"
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
        deleted_at:
          type: string
          format: date-time
          nullable: true
    ProductDescription:
      type: object
      properties:
        product_id:
          type: integer
        product_des:
          type: string
          example: "A rich dark chocolate bar made with 70% cocoa"
        specifications:
          type: object
          description: Additional product specifications
          example: {"weight": "100g", "ingredients": ["cocoa mass", "sugar", "cocoa butter"]}
    ProductImage:
      type: object
      properties:
        image_id:
          type: integer
        product_id:
          type: integer
        image_url:
          type: string
          format: uri
          example: "/images/products/dark-chocolate.jpg"
        is_primary:
          type: boolean
          example: true
        created_at:
          type: string
          format: date-time
    ProductWithImages:
      type: object
      allOf:
        - $ref: '#/components/schemas/Product'
        - type: object
          properties:
            product_des:
              type: string
              nullable: true
            specifications:
              type: object
              nullable: true
            images:
              type: array
              items:
                $ref: '#/components/schemas/ProductImage'
    Admin:
      type: object
      properties:
        id:
          type: integer
          example: 1
        username:
          type: string
          example: "admin"
        firstName:
          type: string
          example: "Admin"
        lastName:
          type: string
          example: "User"
        email:
          type: string
          format: email
          example: "admin@example.com"
        role:
          type: string
          example: "admin"
    LoginCredentials:
      type: object
      properties:
        username:
          type: string
          example: "admin"
        password:
          type: string
          format: password
          example: "password"
    LoginResponse:
      type: object
      properties:
        success:
          type: boolean
          example: true
        token:
          type: string
          example: "mock-jwt-token"
        user:
          type: object
          properties:
            id:
              type: integer
            username:
              type: string
            role:
              type: string
    ErrorResponse:
      type: object
      properties:
        success:
          type: boolean
          example: false
        message:
          type: string
          example: "Error message"
    ProductCreate:
      type: object
      required:
        - name
        - price
        - category
      properties:
        name:
          type: string
          example: "Dark Chocolate Bar"
        status:
          type: boolean
          example: true
        quantities:
          type: integer
          example: 100
        price:
          type: number
          format: float
          example: 9.99
        category:
          type: string
          example: "chocolate-bar"
        description:
          type: string
          example: "A rich dark chocolate bar made with 70% cocoa"
        specifications:
          type: object
          example: {"weight": "100g", "ingredients": ["cocoa mass", "sugar", "cocoa butter"]}
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
paths:
  /products:
    get:
      summary: Get all active products
      operationId: getAllProducts
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Product'
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    post:
      summary: Create a new product
      operationId: createProduct
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProductCreate'
      responses:
        '201':
          description: Product created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    $ref: '#/components/schemas/Product'
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /products/featured:
    get:
      summary: Get featured products
      operationId: getFeaturedProducts
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/ProductWithImages'
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /products/category/{category}:
    get:
      summary: Get products by category
      operationId: getProductsByCategory
      parameters:
        - name: category
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    type: array
                    items:
                      allOf:
                        - $ref: '#/components/schemas/Product'
                        - type: object
                          properties:
                            product_des:
                              type: string
                            specifications:
                              type: object
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /products/with-images/{id}:
    get:
      summary: Get product with images
      operationId: getProductWithImages
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    $ref: '#/components/schemas/ProductWithImages'
        '404':
          description: Product not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /products/{id}:
    get:
      summary: Get product by ID
      operationId: getProductById
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    allOf:
                      - $ref: '#/components/schemas/Product'
                      - type: object
                        properties:
                          product_des:
                            type: string
                          specifications:
                            type: object
        '404':
          description: Product not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    put:
      summary: Update a product
      operationId: updateProduct
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProductCreate'
      responses:
        '200':
          description: Product updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    allOf:
                      - $ref: '#/components/schemas/Product'
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    delete:
      summary: Delete a product (soft delete)
      operationId: deleteProduct
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Product deleted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: "Product with ID 1 deleted successfully"
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /admin/login:
    post:
      summary: Admin login
      operationId: adminLogin
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginCredentials'
      responses:
        '200':
          description: Login successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoginResponse'
        '401':
          description: Invalid credentials
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /admin/profile:
    get:
      summary: Get admin profile
      operationId: getAdminProfile
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    $ref: '#/components/schemas/Admin'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    put:
      summary: Update admin profile
      operationId: updateAdminProfile
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                firstName:
                  type: string
                lastName:
                  type: string
                email:
                  type: string
                  format: email
      responses:
        '200':
          description: Profile updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    $ref: '#/components/schemas/Admin'
                  message:
                    type: string
                    example: "Profile updated successfully"
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /chocolate/types:
    get:
      summary: Get all chocolate types
      operationId: getChocolateTypes
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    type: array
                    items:
                      type: object
                      properties:
                        id:
                          type: string
                        name:
                          type: string
                        description:
                          type: string
                        priceMultiplier:
                          type: number
  /chocolate/toppings:
    get:
      summary: Get all available toppings
      operationId: getChocolateToppings
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    type: array
                    items:
                      type: object
                      properties:
                        id:
                          type: string
                        name:
                          type: string
                        description:
                          type: string
                        price:
                          type: number
                        category:
                          type: string