openapi: 3.0.0
info:
  title: WebProject API
  description: |
    # Introduction
    This API provides user management and authentication services.
    
    ## Features
    - User Management (CRUD operations)
    - Authentication
    - Input validation
    
    ## Error Codes
    - 200: Success
    - 201: Created
    - 400: Bad Request
    - 401: Unauthorized
    - 404: Not Found
    - 500: Server Error
  version: 1.0.0
  contact:
    name: API Support
    email: support@example.com
servers:
  - url: http://localhost:3000
    description: Development server

security:
  - bearerAuth: []
  - apiKeyAuth: []

paths:
  /:
    get:
      summary: Get homepage greeting
      description: Returns a simple hello world message
      responses:
        '200':
          description: Successful response
          content:
            text/plain:
              schema:
                type: string
                example: "Hello World"
    post:
      summary: Post data to homepage
      description: Accepts input and returns an echo response
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                input:
                  type: string
                  example: "test message"
      responses:
        '200':
          description: Echo response
          content:
            text/plain:
              schema:
                type: string
                example: "Received: test message"
  /users:
    get:
      tags:
        - Users
      summary: Get all users
      description: |
        Retrieves a list of all users in the system.
        The response is paginated with a default of 10 items per page.
      parameters:
        - in: query
          name: page
          schema:
            type: integer
            minimum: 1
            default: 1
          description: Page number
        - in: query
          name: limit
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 10
          description: Items per page
      responses:
        '200':
          description: List of users
          headers:
            X-Total-Count:
              schema:
                type: integer
              description: Total number of users
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/User'
                  pagination:
                    type: object
                    properties:
                      current_page:
                        type: integer
                      total_pages:
                        type: integer
                      total_items:
                        type: integer
              example:
                data:
                  - id: 1
                    name: "John Doe"
                    email: "john.doe@example.com"
                    created_at: "2023-01-01T00:00:00Z"
                pagination:
                  current_page: 1
                  total_pages: 5
                  total_items: 50
        '401':
          $ref: '#/components/responses/UnauthorizedError'

  /users/{id}:
    parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
        description: User ID
    get:
      summary: Get user by ID
      description: Returns a single user by their ID
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
          description: The user ID
      responses:
        '200':
          description: User found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '404':
          description: User not found
          content:
            text/plain:
              schema:
                type: string
                example: "User not found"
    put:
      tags:
        - Users
      summary: Update user
      description: Update user information by ID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserUpdate'
      responses:
        '200':
          description: User updated successfully
        '404':
          $ref: '#/components/responses/NotFoundError'
    delete:
      tags:
        - Users
      summary: Delete user
      description: Delete user by ID
      responses:
        '204':
          description: User deleted successfully
        '404':
          $ref: '#/components/responses/NotFoundError'

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
    apiKeyAuth:
      type: apiKey
      in: header
      name: X-API-Key

  schemas:
    User:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        name:
          type: string
          minLength: 2
          maxLength: 50
        email:
          type: string
          format: email
        created_at:
          type: string
          format: date-time
          readOnly: true
        updated_at:
          type: string
          format: date-time
          readOnly: true
      required:
        - name
        - email

    UserUpdate:
      type: object
      properties:
        name:
          type: string
          minLength: 2
          maxLength: 50
        email:
          type: string
          format: email

    Error:
      type: object
      properties:
        code:
          type: string
        message:
          type: string
        details:
          type: object

  responses:
    UnauthorizedError:
      description: Authentication information is missing or invalid
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            code: "UNAUTHORIZED"
            message: "Invalid or missing authentication token"

    NotFoundError:
      description: The specified resource was not found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            code: "NOT_FOUND"
            message: "Resource not found"

  examples:
    UserExample:
      value:
        id: 1
        name: "John Doe"
        email: "john.doe@example.com"
        created_at: "2023-01-01T00:00:00Z"
        updated_at: "2023-01-01T00:00:00Z"

